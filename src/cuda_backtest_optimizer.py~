"""
CUDA回测优化器
专门针对CUDA环境优化的高性能回测实现
"""

import torch
import numpy as np
from typing import Tuple, Dict, Any
import time
import torch.jit

# JIT编译的辅助函数，用于模拟scan操作
@torch.jit.script
def _functional_scan(fn, inputs, initial_state):
    states = []
    current_state = initial_state
    for t in range(inputs[0].shape[1]):
        # 将输入张量的第t个时间步的数据传递给步进函数
        step_inputs = [x[:, t] for x in inputs]
        current_state = fn(current_state, step_inputs)
        states.append(current_state)
    
    # 将状态列表堆叠成张量
    final_states = {key: torch.stack([s[key] for s in states], dim=1) for key in initial_state.keys()}
    return final_states

# JIT编译的回测步进函数
@torch.jit.script
def _backtest_step_fn(state: Dict[str, torch.Tensor], inputs: Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]) -> Dict[str, torch.Tensor]:
    """单个时间步的回测逻辑"""
    # 解包状态和输入
    (portfolio_value, position, entry_price, running_max) = (state['portfolio_value'], state['position'], state['entry_price'], state['running_max'])
    (signal, price, buy_threshold, sell_threshold, max_position, stop_loss, max_drawdown_param) = inputs

    # 更新投资组合价值
    price_return = (price - state['last_price']) / state['last_price']
    updated_value = portfolio_value * (1 + position * price_return)

    # 计算回撤
    new_running_max = torch.maximum(running_max, updated_value)
    current_drawdown = (new_running_max - updated_value) / (new_running_max + 1e-8)

    # 止损决策
    stop_loss_triggered = (position > 0) & (entry_price > 0) & (price < entry_price * (1 - stop_loss))

    # 交易决策
    can_buy = (position == 0) & (signal > buy_threshold) & (current_drawdown < max_drawdown_param)
    can_sell = (position > 0) & ((signal < sell_threshold) | stop_loss_triggered | (current_drawdown > max_drawdown_param))

    # 更新仓位和入场价格
    new_position = torch.where(can_buy, max_position, position)
    new_position = torch.where(can_sell, torch.zeros_like(new_position), new_position)
    
    new_entry_price = torch.where(can_buy, price, entry_price)
    new_entry_price = torch.where(can_sell, torch.zeros_like(new_entry_price), new_entry_price)

    return {
        'portfolio_value': updated_value,
        'position': new_position,
        'entry_price': new_entry_price,
        'running_max': new_running_max,
        'last_price': price
    }

class CudaBacktestOptimizer:
    """CUDA优化的回测引擎"""
    
    def __init__(self, device: torch.device):
        """
        初始化CUDA回测优化器
        
        Args:
            device: CUDA设备
        """
        self.device = device
        self.enable_memory_optimization = True
        self.batch_size = 1000  # 批处理大小
        
    def vectorized_backtest_v1(self, signals: torch.Tensor, returns: torch.Tensor,
                              buy_thresholds: torch.Tensor, sell_thresholds: torch.Tensor,
                              max_positions: torch.Tensor) -> torch.Tensor:
        """
        版本1：简化向量化回测（最快）
        适用于大种群快速评估
        """
        population_size, n_samples = signals.shape
        
        # 扩展阈值维度
        buy_thresh = buy_thresholds.unsqueeze(1)
        sell_thresh = sell_thresholds.unsqueeze(1)
        max_pos = max_positions.unsqueeze(1)
        
        # 计算信号强度（连续值而非离散交易）
        signal_strength = torch.sigmoid((signals - 0.5) * 6)  # 增强信号敏感度
        
        # 动态仓位分配
        positions = signal_strength * max_pos.squeeze(1).unsqueeze(1)
        
        # 计算组合收益
        period_returns = returns.unsqueeze(0).expand(population_size, -1)
        portfolio_returns = positions * period_returns
        
        # 性能指标计算
        mean_returns = torch.mean(portfolio_returns, dim=1)
        std_returns = torch.std(portfolio_returns, dim=1) + 1e-8
        sharpe_ratios = mean_returns / std_returns
        
        # 最大回撤（简化计算）
        cumulative_returns = torch.cumsum(portfolio_returns, dim=1)
        running_max = torch.cummax(cumulative_returns, dim=1)[0]
        drawdowns = running_max - cumulative_returns
        max_drawdowns = torch.max(drawdowns, dim=1)[0]
        
        return sharpe_ratios - 0.5 * max_drawdowns
    
    def vectorized_backtest_v2(self, signals: torch.Tensor, returns: torch.Tensor,
                              buy_thresholds: torch.Tensor, sell_thresholds: torch.Tensor,
                              max_positions: torch.Tensor) -> torch.Tensor:
        """
        版本2：精确向量化回测（平衡速度和精度）
        包含更真实的交易逻辑
        """
        population_size, n_samples = signals.shape
        
        # 生成交易信号
        buy_signals = (signals > buy_thresholds.unsqueeze(1)).float()
        sell_signals = (signals < sell_thresholds.unsqueeze(1)).float()
        
        # 使用卷积操作模拟状态转换
        positions = self._simulate_position_changes(buy_signals, sell_signals, max_positions)
        
        # 计算组合价值
        portfolio_values = self._calculate_portfolio_values(positions, returns)
        
        # 性能指标
        sharpe_ratios = self._calculate_sharpe_ratios(portfolio_values)
        max_drawdowns = self._calculate_max_drawdowns(portfolio_values)
        trade_frequencies = self._calculate_trade_frequencies(positions)
        
        # 综合评分
        fitness = 0.6 * sharpe_ratios - 0.3 * max_drawdowns + 0.1 * trade_frequencies
        
        return fitness
    
    def vectorized_backtest_v3(self, signals: torch.Tensor, returns: torch.Tensor,
                              buy_thresholds: torch.Tensor, sell_thresholds: torch.Tensor,
                              max_positions: torch.Tensor, stop_losses: torch.Tensor, 
                              max_drawdowns: torch.Tensor) -> torch.Tensor:
        """
        版本3：完整向量化回测（最精确, for-loop JIT）
        包含止损、仓位管理等完整功能
        """
        population_size, n_samples = signals.shape
        
        # 初始化状态张量
        positions = torch.zeros(population_size, n_samples + 1, device=self.device)
        portfolio_values = torch.ones(population_size, n_samples + 1, device=self.device)
        entry_prices = torch.zeros(population_size, device=self.device)
        prices = torch.cat([torch.ones(1, device=self.device), 1 + returns]).cumprod(0)

        # 扩展参数维度
        buy_thresh = buy_thresholds.unsqueeze(1)
        sell_thresh = sell_thresholds.unsqueeze(1)
        max_pos = max_positions.unsqueeze(1)
        stop_loss = stop_losses.unsqueeze(1)
        max_dd = max_drawdowns.unsqueeze(1)
        
        # 逐步模拟（JIT编译的for循环）
        for t in range(n_samples):
            current_price = prices[t+1]
            current_positions = positions[:, t]
            current_values = portfolio_values[:, t]
            
            updated_values = current_values * (1 + current_positions * returns[t])
            
            running_max = torch.maximum(portfolio_values[:, :t+1].max(dim=1)[0], updated_values)
            current_drawdown = (running_max - updated_values) / (running_max + 1e-8)
            
            stop_loss_triggered = (current_positions > 0) & (entry_prices > 0) & (current_price < entry_prices * (1 - stop_loss.squeeze(1)))

            can_buy = (current_positions == 0) & (signals[:, t] > buy_thresh.squeeze(1)) & (current_drawdown < max_dd.squeeze(1))
            can_sell = (current_positions > 0) & ((signals[:, t] < sell_thresh.squeeze(1)) | stop_loss_triggered | (current_drawdown > max_dd.squeeze(1)))
            
            new_positions = torch.where(can_buy, max_pos.squeeze(1), current_positions)
            new_positions = torch.where(can_sell, torch.zeros_like(new_positions), new_positions)
            
            entry_prices = torch.where(can_buy, current_price, entry_prices)
            entry_prices = torch.where(can_sell, torch.zeros_like(entry_prices), entry_prices)
            
            positions[:, t + 1] = new_positions
            portfolio_values[:, t + 1] = updated_values
        
        # ... (v3的性能指标计算部分保持不变)
        returns_series = torch.diff(portfolio_values, dim=1) / (portfolio_values[:, :-1] + 1e-8)
        mean_returns = torch.mean(returns_series, dim=1)
        std_returns = torch.std(returns_series, dim=1) + 1e-8
        sharpe_ratios = mean_returns / std_returns
        running_max_final = torch.cummax(portfolio_values, dim=1)[0]
        drawdowns_final = (running_max_final - portfolio_values) / (running_max_final + 1e-8)
        max_drawdowns_calc = torch.max(drawdowns_final, dim=1)[0]
        position_changes = torch.abs(torch.diff(positions, dim=1))
        trade_counts = torch.sum(position_changes > 1e-6, dim=1).float()
        normalized_trades = torch.clamp(trade_counts / n_samples, 0, 1)
        fitness = 0.5 * sharpe_ratios - 0.3 * max_drawdowns_calc + 0.2 * normalized_trades
        return torch.nan_to_num(fitness, nan=-10.0, posinf=0.0, neginf=-10.0)

    def vectorized_backtest_v4_scan(self, signals: torch.Tensor, returns: torch.Tensor,
                                 buy_thresholds: torch.Tensor, sell_thresholds: torch.Tensor,
                                 max_positions: torch.Tensor, stop_losses: torch.Tensor, 
                                 max_drawdowns: torch.Tensor) -> torch.Tensor:
        """版本4：完整回测（Scan模式）"""
        population_size, n_samples = signals.shape
        prices = torch.cat([torch.ones(1, device=self.device), 1 + returns]).cumprod(0)

        # 准备scan的输入
        inputs = (
            signals,
            prices[1:],
            buy_thresholds.unsqueeze(1).expand(-1, n_samples),
            sell_thresholds.unsqueeze(1).expand(-1, n_samples),
            max_positions.unsqueeze(1).expand(-1, n_samples),
            stop_losses.unsqueeze(1).expand(-1, n_samples),
            max_drawdowns.unsqueeze(1).expand(-1, n_samples)
        )

        # 初始化状态
        initial_state = {
            'portfolio_value': torch.ones(population_size, device=self.device),
            'position': torch.zeros(population_size, device=self.device),
            'entry_price': torch.zeros(population_size, device=self.device),
            'running_max': torch.ones(population_size, device=self.device),
            'last_price': torch.ones(population_size, device=self.device)
        }

        # 执行scan
        final_states = _functional_scan(_backtest_step_fn, inputs, initial_state)
        portfolio_values = final_states['portfolio_value']

        # ... (性能指标计算与v3相同)
        returns_series = torch.diff(portfolio_values, dim=1) / (portfolio_values[:, :-1] + 1e-8)
        mean_returns = torch.mean(returns_series, dim=1)
        std_returns = torch.std(returns_series, dim=1) + 1e-8
        sharpe_ratios = mean_returns / std_returns
        running_max_final = torch.cummax(portfolio_values, dim=1)[0]
        drawdowns_final = (running_max_final - portfolio_values) / (running_max_final + 1e-8)
        max_drawdowns_calc = torch.max(drawdowns_final, dim=1)[0]
        position_changes = torch.abs(torch.diff(final_states['position'], dim=1))
        trade_counts = torch.sum(position_changes > 1e-6, dim=1).float()
        normalized_trades = torch.clamp(trade_counts / n_samples, 0, 1)
        fitness = 0.5 * sharpe_ratios - 0.3 * max_drawdowns_calc + 0.2 * normalized_trades
        return torch.nan_to_num(fitness, nan=-10.0, posinf=0.0, neginf=-10.0)

    def _simulate_position_changes(self, buy_signals: torch.Tensor, sell_signals: torch.Tensor,
                                 max_positions: torch.Tensor) -> torch.Tensor:
        # ... (原有代码)
    
    def _calculate_portfolio_values(self, positions: torch.Tensor, returns: torch.Tensor) -> torch.Tensor:
        # ... (原有代码)

    def _calculate_sharpe_ratios(self, portfolio_values: torch.Tensor) -> torch.Tensor:
        # ... (原有代码)

    def _calculate_max_drawdowns(self, portfolio_values: torch.Tensor) -> torch.Tensor:
        # ... (原有代码)

    def _calculate_trade_frequencies(self, positions: torch.Tensor) -> torch.Tensor:
        # ... (原有代码)

    def benchmark_methods(self, signals: torch.Tensor, returns: torch.Tensor,
                         buy_thresholds: torch.Tensor, sell_thresholds: torch.Tensor,
                         max_positions: torch.Tensor, stop_losses: torch.Tensor,
                         max_drawdowns: torch.Tensor) -> Dict[str, Any]:
        """基准测试不同回测方法的性能"""
        
        methods = {
            'v1_simple': self.vectorized_backtest_v1,
            'v2_balanced': self.vectorized_backtest_v2,
            'v3_complete': self.vectorized_backtest_v3,
            'v4_scan': self.vectorized_backtest_v4_scan
        }
        
        results = {}
        
        for name, method in methods.items():
            # 预热GPU
            args = (signals[:10], returns, buy_thresholds[:10], sell_thresholds[:10], max_positions[:10])
            if name in ['v3_complete', 'v4_scan']:
                args += (stop_losses[:10], max_drawdowns[:10])
            _ = method(*args)
            
            torch.cuda.synchronize()
            
            # 计时
            start_time = time.time()
            
            full_args = (signals, returns, buy_thresholds, sell_thresholds, max_positions)
            if name in ['v3_complete', 'v4_scan']:
                full_args += (stop_losses, max_drawdowns)
            fitness = method(*full_args)
            
            torch.cuda.synchronize()
            elapsed_time = time.time() - start_time
            
            results[name] = {
                'time': elapsed_time,
                'fitness_mean': torch.mean(fitness).item(),
                'fitness_std': torch.std(fitness).item(),
                'throughput': signals.shape[0] / elapsed_time
            }
        
        return results


if __name__ == "__main__":
    test_cuda_backtest_optimizer()
